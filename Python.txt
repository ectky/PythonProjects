PYTHON 

'{0:.2f}'.format(value)
"%d"%value == "{0:.0f}".format(value) //f-float, d-int
"{0:.0}".format(value) // scientific method for numbers

ord(char) ord('a') = 97

chr(int)  chr(97) = a

for i in range(1, 10): //prints without 10

print ('i =', i) //i = 1 (, = space)

math.floor()

math.ceil()

abs()

.lower()

\n //new line

Ctrl + R //find and replace

max() && min()

print('*', end='') //no new line after printing

print('-' * 10) //prints ----------

len(list) list.append(el) list.count(el) list.index(el)
list.insert(index, el) list.pop(index) list.remove(el)
list.reverse() list.sort(/reverse=True/)

list.extend() = +=

string.split('')

list = [int(item) for item in input().split(' ')]
list = map(float, input().split(' '))

', '.join(list)

map(str, list)

el in list --> True/False

if len(str(area)) in range(8,12):
    print(area)
else:
    print('%g' %area)

def print_raised(number):
    if len(str(number)) == 7:
        print(number)
    elif len(str(number)) > 17:
        print('%.4f' % number)
    else:
        print('%.f' % number)
    return

print(value if value != int(value) else int(value))

dictionary.pop(key, None//or sth else)

for key in dictionary:
	print('{0}{1}'.format(key, dictionary[key]))

len(dictionary) dictionary.clear()

dict = {}

teams_sorted_by_score = sorted(team_new_scores.items(), key=lambda kv: kv[1], reverse=True)

for key in dict.keys():
	print(key)

print(", ".join(dict.values()))

key in dictionary//.values()

continents[continent] = {country: [city]}

string.find(substring//, start, end) string.rfind(substring//, start, end)

string2 = string.replace(old, new//, count)

string[::-1]

string.strip(//' ', ',' ...) string.lstrip() string.rstrip()

RegEx

[(^)amc] - (not) a single a, m, c
amc{3,6} - between 3 and 6 uses of amc
amc - word
([a-z]) - group
[(^)a-z] - (not) a character in range a-z
\s(\S) - (non)whitespase
\d(\D) - (non)digit
\w(\W) - (non)word
\b(\B) - (non) word boundry (granica za duma)
+ - one or more (matches the whole thing)
* - zero or more (there can be and can not be sth)
? - zero or one ()
. - everything
^/$ - start/end of string
\1 - group 1

import re
regex = re.match(pattern, string, flags=0) - searches in the begging of the string
regex = re.search(pattern, string, flags=0) - searches in the whole string
regex = re.findall(pattern, string, flags=0) - finds all subs and returns a list of them
regex = re.complie(pattern)
sth.start()/end() - start/end index
sth.group(1) - returns group 1
sth.group(0) - returns the whole match

Files and Directories

file = open(file_name [,access_mode])
'r(b)' - read only
'r(b)+' - reading and writing (the pointer is at the beginning of the file)
'w(b)' - write only
'w(b)+' - writing and reading (overwries the file if exisiting)
'a(b)' - appending (writing if file does not exist)
'a(b)+' - appending and reading
b - binary format

file.read(num)
file.readline()
file.readlines()
file.write()
file.close()

word[:-1]

[x.name for x in ploks]

ploks = sorted(ploks, key = lambda x:(x.price,-len(x.comp)))